
"""
=====================================================================================
MODULE: ALGAEDataSets

PURPOSE:
This module contains the ALGAE analysis code which tries to initially read
exposure data sets from the files that are generated by the main ALGAE protocol.



DESCRIPTION:
The module is meant to hide code that is responsible for scanning a directory
and detecting the most recent batch of exposure data set files that are 
generated by ALGAE.

Code used to read all the exposure data sets will look like this:

commandLineArguments = CommandLineArguments()
algaeDataSets = ALGAEDataSets()
algaeDataSets.detectDataSets(commandLineArguments)
algaeDataSets.printAvailableDataSetFilePaths()

The data frames would then be accessed like this:

algaeDataSets.earlyMobClnExp

Note that this code is brittle and will break if changes are made to the names of
files that are generated by the main ALGAE Protocol.

OPEN SOURCE LICENSING
Copyright 2017 Imperial College London, developed by the Small Area
Health Statistics Unit in collaboration with the Avon Longitudinal Study of Parents
and Children (ALSPAC).
 
The code was originally authored by Kevin Garwood and reviewed by Olly Butters
and Iain Bickerstaffe.

This file is part of the ALGAE (Algorithms for Assessing Early life exposures) project.
ALGAE is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with RIF.  If not, see <http://www.gnu.org/licenses/>.

Author: Kevin Garwood
=====================================================================================
"""

from GlobalSettings import CommandLineArguments
import re #Library for handling regular expressions
import os
import fnmatch
from datetime import datetime
import pandas as pd


"""
===============================================================================
CLASS DESCRIPTION:
This class uses the inputDirectory parameter found in the CommandLineArguments
class and tries to identify the file paths of all exposure data sets that will
be used to generate graphs. 
===============================================================================
"""
class ALGAEDataSetFileLocations():

	def __init__(self):
		self.earlyCleanedAddrFile = None

		self.earlyCovFile = None  #DONE
		self.earlyMovesCovFile = None  #DONE		
		self.earlyMobClnExpFile = None  #DONE
		self.earlyMobUnclnExpFile = None  #DONE
		self.earlyStgMobExpFile = None  #DONE
		self.earlyNoMobBirthExpFile = None  #DONE		
		self.earlySensVariablesFile = None  #DONE		
		self.earlyStageSensVariablesFile = None  #DONE
			
		self.laterCleanedAddrFile = None
		self.laterCovFile = None  #DONE
		self.laterMovesCovFile = None  #DONE		
		self.laterMobClnExpFile = None  #DONE
		self.laterMobUnclnExpFile = None  #DONE
		self.laterStgMobExpFile = None  #DONE
		self.laterNoMobBirthExpFile = None  #DONE		
		self.laterSensVariablesFile = None  #DONE
		self.laterStageSensVariablesFile = None  #DONE


	"""
	===============================================================================
	FUNCTION DESCRIPTION:
	Uses the "inputDirectory" command line argument to begin identifying 
	available data sets
	===============================================================================
	"""
	def detectAvailableDataSetFiles(self, inputDirectory):

		#first, scan directory for a sample file that should appear in 
		#the results directory.  We want to identify
		latestTimeStamp = self.identifyLatestRunTimeStamp(inputDirectory)

		#Now filter root directory for files that contain the latest time stamp and
		#end with CSV.  All of these files will belong to the latest run
		currentRunFilter = '*' + latestTimeStamp + '*.csv'					
		for path, subdirs, files in os.walk(inputDirectory):
			for filename in fnmatch.filter(files, currentRunFilter):
				self.identifyALGAEInputFile(path, filename)

	"""
	===============================================================================
	FUNCTION DESCRIPTION:
	Looks for the latest version of an example data set to determine the most
	recent version.  Whenever ALGAE runs, it generates CSV files that contains
	the time stamp for when they were created.  Over a period of several runs
	a directory can fill up with various versions of the same exposure file.
	The analysis component is designed to only be applied to the most recent
	batch of generated files and this method identifies which time stamp to look
	for.
	===============================================================================
	"""
	def identifyLatestRunTimeStamp(self, inputDirectory):
		
		#Look in the results for any CSV files that contain the phrase
		#cleaned_addr.  If there are more than one of them, they probably
		#represent different runs and it probably means the user has
		#accumulated old files.  We want to try to extract the latest
		#date from these files and use that to determine which run we
		#want to use for analysis
		
		#Find something like: res_early_cleaned_addr2016-Nov-18-22-57.csv
		#We want to extract phrases like Nov-18-22-57 and then determine which one is most
		#recent
		
		willContainDate = re.compile('._addr(.+?).csv')
		candidates = []
		for path, subdirs, files in os.walk(inputDirectory):
			for fileName in fnmatch.filter(files, '*cleaned_addr*.csv'):
				searchResult = re.search(willContainDate, fileName)
				datePhrase = searchResult.group(1)
				if searchResult:
					#see: http://strftime.org/ for options
					candidates.append(datetime.strptime(datePhrase, '%Y-%b-%d-%H-%M'))
					
		maximumTimeStamp = max(candidates)
					
		return maximumTimeStamp.strftime('%Y-%b-%d-%H-%M')


	"""
	===============================================================================
	FUNCTION DESCRIPTION:
	Takes a given file name and attempts to match it against patterns that would
	indicate it is the file name of one of the exposure data sets that will be
	used in analysis.
	===============================================================================
	"""
	def identifyALGAEInputFile(self, path, fileName):

		if 'early_cleaned_addr' in fileName:
			self.earlyCleanedAddrFile = os.path.join(path, fileName)
		elif 'early_cov' in fileName:
			self.earlyCovFile = os.path.join(path, fileName)
		elif 'early_moves_cov' in fileName:
			self.earlyMovesCovFile = os.path.join(path, fileName)
		elif 'early_mob_cln_exp' in fileName:
			self.earlyMobClnExpFile = os.path.join(path, fileName)	
		elif 'early_mob_uncln_exp' in fileName:
			self.earlyMobUnclnExpFile = os.path.join(path, fileName)		
		elif 'early_stg_mob_exp' in fileName:
			self.earlyStgMobExpFile = os.path.join(path, fileName)
		elif 'early_no_mob_birth_addr' in fileName:
			self.earlyNoMobBirthExpFile = os.path.join(path, fileName)
		elif 'early_sens_variables' in fileName:
			self.earlySensVariablesFile = os.path.join(path, fileName)
		elif 'early_stage_sens_variables' in fileName:
			self.earlyStageSensVariablesFile = os.path.join(path, fileName)
		elif 'later_cleaned_addr' in fileName:
			self.laterCleanedAddrFile = os.path.join(path, fileName)
		elif 'later_cov' in fileName:
			self.laterCovFile = os.path.join(path, fileName)
		elif 'later_moves_cov' in fileName:
			self.laterMovesCovFile = os.path.join(path, fileName)
		elif 'later_mob_cln_exp' in fileName:
			self.laterMobClnExpFile = os.path.join(path, fileName)		
		elif 'later_mob_uncln_exp' in fileName:
			self.laterMobUnclnExpFile = os.path.join(path, fileName)	
		elif 'later_stg_mob_exp' in fileName:
			self.laterStgMobExpFile = os.path.join(path, fileName)
		elif 'later_sens_variables' in fileName:
			self.laterSensVariablesFile = os.path.join(path, fileName)
		elif 'later_stage_sens_variables' in fileName:
			self.laterStageSensVariablesFile = os.path.join(path, fileName)		
		

	"""
	===============================================================================
	FUNCTION DESCRIPTION:
	A convenience function that prints out the file names of all available 
	exposure data sets that would be relevant to the ALGAE analysis.
	===============================================================================
	"""
	def printALGAEFilePaths(self):

		print "1 Early Life Analysis Files"

		print "1.1 Address Period Files"
		print "Address Periods==" + str(self.earlyCleanedAddrFile) + "=="	

		print "1.2 Covariate Files"
		print "Admin Areas at Life Stage Addresses" + str(self.earlyCovFile) + "=="	
		print "Admin Areas for Each Move" + str(self.earlyMovesCovFile) + "=="	

		print "1.3 Exposure Files"
		print "Cleaned Mobility Exposure==" + str(self.earlyMobClnExpFile) + "=="	
		print "Uncleaned Mobility Exposure==" + str(self.earlyMobUnclnExpFile) + "=="	
		print "Life Stage Mobility Exposure==" + str(self.earlyStgMobExpFile) + "=="	
		print "No Mobility Birth Address Exposure==" + str(self.earlyNoMobBirthExpFile) + "=="	

		print "1.4 Sensitivity Variable Files"
		print "Sensitivity Variables across Whole Exposure Time Frame==" + str(self.earlySensVariablesFile)
		print "Sensitivity Variables across each Life Stage==" + str(self.earlyStageSensVariablesFile)

		print "  "
	
		print "2 Later Life Analysis Files"

		print "2.1 Address Period Files"
		print "Address Periods==" + str(self.laterCleanedAddrFile) + "=="	

		print "2.2 Covariate Files"
		print "Admin Areas at Life Stage Addresses" + str(self.laterCovFile) + "=="	
		print "Admin Areas for Each Move" + str(self.laterMovesCovFile) + "=="	

		print "2.3 Exposure Files"
		print "Cleaned Mobility Exposure==" + str(self.laterMobClnExpFile) + "=="	
		print "Uncleaned Mobility Exposure==" + str(self.laterMobUnclnExpFile) + "=="	
		print "Life Stage Mobility Exposure==" + str(self.laterStgMobExpFile) + "=="	

		print "2.4 Sensitivity Variable Files"
		print "Sensitivity Variables across Whole Exposure Time Frame==" + str(self.laterSensVariablesFile)
		print "Sensitivity Variables across each Life Stage==" + str(self.laterStageSensVariablesFile)

"""
===============================================================================
CLASS DESCRIPTION:
This class contains references to the exposure data sets.  It reads 
command line arguments in order to obtain the inputDirectory, which is
then used by an instance of ALGAEDataSetFileLocations to identify the file
paths of all available exposure data sets that could be used in analysis.
This class then uses each of the available exposure data file paths to read
a data set.  These are then available for the visualisation graphs that
will try to express their data in graphs.
===============================================================================
"""
class ALGAEDataSets():

	def __init__(self):
		self.commandLineArgs = CommandLineArguments()
		self.expFilePaths = ALGAEDataSetFileLocations()
	
		self.earlyCov = None  #DONE
		self.earlyMovesCov = None  #DONE		
		self.earlyMobClnExp = None  #DONE
		self.earlyMobUnclnExp = None  #DONE
		self.earlyStgMobExp = None  #DONE
		self.earlyNoMobBirthExp = None  #DONE				
		self.earlySensVariables = None  #DONE		
		self.earlyStageSensVariables = None  #DONE			
		self.laterCleanedAddr = None
		self.laterCov = None  #DONE
		self.laterMovesCov = None  #DONE		
		self.laterMobClnExp = None  #DONE
		self.laterMobUnclnExp = None  #DONE
		self.laterStgMobExp = None  #DONE
		self.laterNoMobBirthExp = None  #DONE				
		self.laterSensVariables = None  #DONE		
		self.laterStageSensVariables = None  #DONE

	def detectDataSets(self, inputDirectory):
		self.expFilePaths.detectAvailableDataSetFiles(inputDirectory)

		if self.expFilePaths.earlyMobClnExpFile is not None:
			self.earlyMobClnExp = pd.read_csv(self.expFilePaths.earlyMobClnExpFile)
		if self.expFilePaths.earlyMobUnclnExpFile is not None:
			self.earlyMobUnclnExp = pd.read_csv(self.expFilePaths.earlyMobUnclnExpFile)
		if self.expFilePaths.earlyStgMobExpFile is not None:
			self.earlyStgMobExp = pd.read_csv(self.expFilePaths.earlyStgMobExpFile)
		if self.expFilePaths.earlyNoMobBirthExpFile is not None:
			self.earlyNoMobBirthExp = pd.read_csv(self.expFilePaths.earlyNoMobBirthExpFile)
		if self.expFilePaths.laterMobClnExpFile is not None:
			self.laterMobClnExp = pd.read_csv(self.expFilePaths.laterMobClnExpFile)	
		if self.expFilePaths.laterMobUnclnExpFile is not None:
			self.laterMobUnclnExp = pd.read_csv(self.expFilePaths.laterMobUnclnExpFile)
		if self.expFilePaths.laterStgMobExpFile is not None:
			self.laterStgMobExp = pd.read_csv(self.expFilePaths.laterStgMobExpFile)
		if self.expFilePaths.earlyCovFile is not None:
			self.earlyCov = pd.read_csv(self.expFilePaths.earlyCovFile)
		if self.expFilePaths.earlyMovesCovFile is not None:
			self.earlyMovesCov = pd.read_csv(self.expFilePaths.earlyMovesCovFile)
		if self.expFilePaths.laterCovFile is not None:
			self.laterCov = pd.read_csv(self.expFilePaths.laterCovFile)
		if self.expFilePaths.laterMovesCovFile is not None:
			self.laterMovesCov = pd.read_csv(self.expFilePaths.laterMovesCovFile)
		if self.expFilePaths.earlySensVariablesFile is not None:
			self.earlySens = pd.read_csv(self.expFilePaths.earlySensVariablesFile)
		if self.expFilePaths.earlyStageSensVariablesFile is not None:
			self.earlyStgSens = pd.read_csv(self.expFilePaths.earlyStageSensVariablesFile)
		if self.expFilePaths.laterSensVariablesFile is not None:
			self.laterSens = pd.read_csv(self.expFilePaths.laterSensVariablesFile)
		if self.expFilePaths.laterStageSensVariablesFile is not None:
			self.laterStgSens = pd.read_csv(self.expFilePaths.laterStageSensVariablesFile)

	def printAvailableDataSetFilePaths(self):
		self.expFilePaths.printALGAEFilePaths()
		
	def getNumberOfEarlyLifeStages(self):
		numberOfLifeStages = 0
		if self.earlyMobClnExp is not None:
			numberOfLifeStages = len(self.earlyMobClnExp['algae3101_life_stage'].unique())
		return numberOfLifeStages

	def getNumberOfLaterLifeStages(self):
		numberOfLifeStages = 0
		if self.laterMobClnExp is not None:
			#print self.laterMobClnExp
			numberOfLifeStages = len(self.laterMobClnExp['algae3501_life_stage'].unique())
		return numberOfLifeStages
			