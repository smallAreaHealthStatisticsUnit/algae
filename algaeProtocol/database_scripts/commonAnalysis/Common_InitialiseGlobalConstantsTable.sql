
/**
 * ================================================================================================= 
 * MODULE COMM_INIT: Initialise Global Constants
 * =================================================================================================
 * Description
 * -----------
 * This module contains code that manages the global settings that apply when the analyses are
 * running.
 * 
 * NOTE: Apart from the setting the default gestational age at birth,
 * the other global constants appear to be something that gets developed more in the
 * future.  
 * 
 * 
 *
 * Main Function
 * -------------
 *    setup_scripts
 *
 *
 * ------------------------------------------------------------------------------------------------
 * Copyright 2017 Imperial College London, developed by the Small Area
 * Health Statistics Unit in collaboration with the Avon Longitudinal Study of Parents
 * and Children (ALSPAC).
 * 
 * The code was originally authored by Kevin Garwood and reviewed by Olly Butters
 * and Iain Bickerstaffe.
 *
 * This file is part of the ALGAE (Algorithms for Assessing Early life exposures) project.
 * ALGAE is free software: you can redistribute it and/or modify it under the terms of the GNU 
 * Lesser General Public License as published by the Free Software Foundation, either version 3 
 * of the License, or (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the code.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Kevin Garwood
 * ================================================================================================= 
*/


/*
 * #DESIGN_FOR_REUSE:
 * setup_scripts is where you can make changes to the default gestation age.  For example, if your
 * study wants to use a value other than "38" to impute blank gestation age at birth values, change
 * specify the number of weeks in the first parameter.  The other constants will be developed more 
 * in the future.
*/


/**
 * ------------------------------------------------------------------------------------------------ 
 * FUNCTION setup_scripts
 * ----------------------
 * Description
 * -----------
 * Initialises global constants that are used throughout the protocol.
 * NOTE: It seems that most of these 
 * 
 * Parameters
 * ----------
 * (1) f_default_gestation_age: The gestation age which will be used to impute
 *     life stage records which have a missing value for it.  Birth date and
 *     gestation age cannot be left blank because the fields are used to 
 *     calculate the start and stop boundaries of life stages such as 
 *     first trimester, second trimester, third trimester and first year of 
 *     life.  Default value: 38 weeks.
 * (2) f_instrument_error: the absolute measurement error that is associated
 *     with pollution monitors which recorded the concentrations of air 
 *     pollutants.  We realise that different types of pollutants may have 
 *     different detectors.  For our study we have assumed that the value
 *     is a constant +/- error value that can be applied to all types of 
 *     pollution values such as those for PM10, NOx, etc.
 *     Default value: 0.
 * (3) f_exp_model_error: the absolute value of +/- error of exposure
 *     values that are due to the kind of exposure model that is being used
 *     to generate results.  Models make use of historical pollution values
 *     which are usually generated by various types of sensors (see 
 *     instrument error above).  The model itself may generate errors when
 *     it attempts to interpolate the location of residential addresses
 *     amongst multiple known pollution values.  Default value: 0.
 * (4) f_perfect_match_score: the field value that is used to indicate that
 *     a geocode represents the result of a perfect match with some residential
 *     address.  Note that the kinds of values that appear for the flag can
 *     vary depending on the kind of address matching software that is used.
 *
 * Returns
 * -------
 * Nothing.  
 * Example Invocation
 * ------------------
 * SELECT setup_scripts(null, null, null, null); 
 * SELECT "setup_scripts"(38, 0.002, 0.005, 'M')
 * or
 * SELECT "setup_scripts"(NULL, NULL, NULL, NULL)
 * 
 * For each parameter, we can either express an explicit value or 
 * NULL.  If a parameter value is NULL then a default value will be
 * used in the scripts.  Note that you must pass *some* value for each
 * of the expected parameter 
 * Dependencies
 * ------------
 * None.  Users should call this method first
 *
 * General Notes on the Code
 * -------------------------
 * In the function, we try to use similar names to describe similar variable concepts.  In the 
 * header of the function, we use "f_" to denote formal parameters, which define what variables 
 * are called by the code that uses the function setup_scripts(...).  The values that are passed 
 * in each of these parameters are called actual parameters and are held in variables in the 
 * DECLARE section beginning with "a_".  The names of formal and actual parameters are reused 
 * again to define the names of field names in database tables that are used by the script.
 * ------------------------------------------------------------------------------------------------ 
 */
CREATE OR REPLACE FUNCTION setup_scripts(
	f_default_gestation_age INT,
	f_instrument_error DOUBLE PRECISION,
	f_exp_model_error DOUBLE PRECISION,
	f_perfect_match_score VARCHAR(5))
	RETURNS void AS 
$$
DECLARE
	a_default_gestation_age INT;	
	a_instrument_error DOUBLE PRECISION;
	a_exp_model_error DOUBLE PRECISION;
	a_perfect_match_score VARCHAR(5);
BEGIN

 	-- Part I: Validate Parameters
 	
 	/*
 	 * #CHANGE_DEFAULT_GESTATION_AGE
 	 * If a study member's gestation age at birth field value in the
 	 * study_member_data table, then it will be filled in with 38 weeks
 	 */
	IF f_default_gestation_age IS NULL THEN
		a_default_gestation_age := 38;
	ELSE
		a_default_gestation_age := f_default_gestation_age;
	END IF;
		
	IF f_instrument_error IS NULL THEN
		a_instrument_error := 0;
	ELSE
		a_instrument_error := f_instrument_error;
	END IF;

	IF f_exp_model_error IS NULL THEN
		a_exp_model_error := 0;
	ELSE
		a_exp_model_error := f_exp_model_error;
	END IF;

	IF f_perfect_match_score IS NULL THEN
		a_perfect_match_score := 'M';
	ELSE
		a_perfect_match_score := f_perfect_match_score;
	END IF;


	SET DATESTYLE TO EUROPEAN;

	-- Part II: Create and populate table containing script constants
	DROP TABLE IF EXISTS global_script_constants;
	CREATE TABLE global_script_constants
	(
		default_gestation_age INT NOT NULL,
		minimum_conception_date DATE DEFAULT NULL,
		maximum_el_end_date DATE DEFAULT NULL,
		total_study_members INT,
		total_study_members_with_addresses INT,
		total_valid_geocodes INT,	
		instrument_error DOUBLE PRECISION NOT NULL,
		exposure_model_error DOUBLE PRECISION NOT NULL,
		perfect_match_score VARCHAR(5) NOT NULL,
		empty_geocode_value VARCHAR(15) NOT NULL
	);

	INSERT INTO global_script_constants(
		default_gestation_age,
		instrument_error, 
		exposure_model_error,
		perfect_match_score,
		empty_geocode_value) 
	VALUES (
		a_default_gestation_age, 
		a_instrument_error,
		a_exp_model_error,
		a_perfect_match_score,
		'empty_geocode');

END;
$$   LANGUAGE plpgsql;

--SELECT setup_scripts(null, 3, null, null, null);
